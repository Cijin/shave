// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: sessions.sql

package database

import (
	"context"
	"time"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (
  id, user_id, email, provider, access_token, refresh_token, created_at, updated_at
) VALUES (
  ?, ?, ?, ?, ?, ?, ?, ?
)
ON CONFLICT (email)
DO UPDATE SET 
  refresh_token = EXCLUDED.refresh_token, 
  access_token = EXCLUDED.access_token, 
  updated_at = EXCLUDED.updated_at
RETURNING id, user_id, email, refresh_token, access_token, provider, created_at, updated_at
`

type CreateSessionParams struct {
	ID           string
	UserID       string
	Email        string
	Provider     string
	AccessToken  string
	RefreshToken string
	CreatedAt    time.Time
	UpdatedAt    time.Time
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSession,
		arg.ID,
		arg.UserID,
		arg.Email,
		arg.Provider,
		arg.AccessToken,
		arg.RefreshToken,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Email,
		&i.RefreshToken,
		&i.AccessToken,
		&i.Provider,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM sessions
WHERE email=?
`

func (q *Queries) DeleteSession(ctx context.Context, email string) error {
	_, err := q.db.ExecContext(ctx, deleteSession, email)
	return err
}

const getSession = `-- name: GetSession :one
SELECT refresh_token FROM sessions
WHERE email=?
LIMIT 1
`

func (q *Queries) GetSession(ctx context.Context, email string) (string, error) {
	row := q.db.QueryRowContext(ctx, getSession, email)
	var refresh_token string
	err := row.Scan(&refresh_token)
	return refresh_token, err
}

const updateSession = `-- name: UpdateSession :exec
UPDATE sessions
SET 
  refresh_token=?,
  access_token=?
WHERE email=?
`

type UpdateSessionParams struct {
	RefreshToken string
	AccessToken  string
	Email        string
}

func (q *Queries) UpdateSession(ctx context.Context, arg UpdateSessionParams) error {
	_, err := q.db.ExecContext(ctx, updateSession, arg.RefreshToken, arg.AccessToken, arg.Email)
	return err
}
